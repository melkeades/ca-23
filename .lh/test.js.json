{
    "sourceFile": "test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1703946925496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1703947290362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,13 @@\n-// Define a function that takes an element, an array of class names, and a callback function as arguments\r\n-function observeClasses(element, classNames, callback) {\r\n-  // Create a mutation observer that will monitor the element's attributes and subtree\r\n-  var observer = new MutationObserver(function (mutations) {\r\n+function onClassesReady(element, classList, callback) {\r\n+  const observer = new MutationObserver(function (mutations) {\r\n     // Loop through the mutations\r\n-    for (var mutation of mutations) {\r\n+    for (const mutation of mutations) {\r\n       // Check if the mutation is related to the class attribute\r\n       if (mutation.attributeName === 'class') {\r\n-        // Check if the element or any of its children contains all of the class names\r\n-        if (childrenHaveClasses(mutation.target, classNames)) {\r\n+        if (childrenHaveClasses(mutation.target, classList)) {\r\n           // if (element.matches(classNames.join('.')) || element.querySelector(classNames.join('.'))) {\r\n-          // If yes, disconnect the observer\r\n           observer.disconnect()\r\n-          // And call the callback function\r\n           callback()\r\n         }\r\n       }\r\n     }\r\n@@ -20,19 +15,12 @@\n   function childrenHaveClasses(element, classList) {\r\n     return classList.every((className) => element.querySelector(`.${className}`))\r\n   }\r\n \r\n-  // Start observing the element's attributes and subtree\r\n   observer.observe(element, { attributes: true, subtree: true })\r\n }\r\n \r\n-// Example usage\r\n-// Get an element by its id\r\n-var div = document.getElementById('myDiv')\r\n-// Define an array of class names\r\n-var classes = ['myClass1', 'myClass2']\r\n-// Define a callback function that will log a message\r\n-var callback = function () {\r\n+const div = document.getElementById('myDiv')\r\n+const classes = ['myClass1', 'myClass2']\r\n+const callback = function () {\r\n   console.log('The element or its child has the classes!')\r\n }\r\n-// Call the observeClasses function with the element, the array of class names, and the callback function\r\n-// observeClasses(div, classes, callback)\r\n"
                },
                {
                    "date": 1704225128356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+const figureWithImg$ = selAll('.w-richtext-figure-type-image:not(.w-richtext-align-floatleft):has(img)')\r\n+figureWithImg$.forEach((el) => (el.style.opacity = '0.5'))\r\n+\r\n+function onClassesReady(element, classNames, callback) {\r\n+  function onClassesReady(element, classList, callback) {\r\n+    const observer = new MutationObserver(function (mutations) {\r\n+      for (const mutation of mutations) {\r\n+        if (mutation.attributeName === 'class') {\r\n+          if (allClassesFoundAmongChildren(mutation.target, classList)) {\r\n+            // if (element.matches(classNames.join('.')) || element.querySelector(classNames.join('.'))) {\r\n+            observer.disconnect()\r\n+            callback()\r\n+          }\r\n+        }\r\n+      }\r\n+    })\r\n+    function allClassesFoundAmongChildren(element, classList) {\r\n+      return classList.every((className) => element.querySelector(`.${className}`))\r\n+    }\r\n+\r\n+    observer.observe(element, { attributes: true, subtree: true })\r\n+  }\r\n+\r\n+  const div = document.getElementById('myDiv')\r\n+  const classes = ['myClass1', 'myClass2']\r\n+  const callback = function () {\r\n+    console.log('The element or its child has the classes!')\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1703946925496,
            "name": "Commit-0",
            "content": "// Define a function that takes an element, an array of class names, and a callback function as arguments\r\nfunction observeClasses(element, classNames, callback) {\r\n  // Create a mutation observer that will monitor the element's attributes and subtree\r\n  var observer = new MutationObserver(function (mutations) {\r\n    // Loop through the mutations\r\n    for (var mutation of mutations) {\r\n      // Check if the mutation is related to the class attribute\r\n      if (mutation.attributeName === 'class') {\r\n        // Check if the element or any of its children contains all of the class names\r\n        if (childrenHaveClasses(mutation.target, classNames)) {\r\n        // if (element.matches(classNames.join('.')) || element.querySelector(classNames.join('.'))) {\r\n          // If yes, disconnect the observer\r\n          observer.disconnect()\r\n          // And call the callback function\r\n          callback()\r\n        }\r\n      }\r\n    }\r\n  })\r\n  function childrenHaveClasses(element, classList) {\r\nreturn classList.every(className => element.querySelector(`.${className}`))\r\n  }\r\n\r\n  // Start observing the element's attributes and subtree\r\n  observer.observe(element, { attributes: true, subtree: true })\r\n}\r\n\r\n// Example usage\r\n// Get an element by its id\r\nvar div = document.getElementById('myDiv')\r\n// Define an array of class names\r\nvar classes = ['myClass1', 'myClass2']\r\n// Define a callback function that will log a message\r\nvar callback = function () {\r\n  console.log('The element or its child has the classes!')\r\n}\r\n// Call the observeClasses function with the element, the array of class names, and the callback function\r\n// observeClasses(div, classes, callback)\r\n"
        }
    ]
}